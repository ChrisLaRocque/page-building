/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Stats = {
  _type: "stats";
  heading?: string;
  stats?: Array<{
    heading?: string;
    number?: string;
    subhead?: string;
    _type: "stat";
    _key: string;
  }>;
};

export type PortableTextSection = {
  _type: "portableTextSection";
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?:
          | "normal"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }
    | ({
        _key: string;
      } & FrequentlyAskedQuestions)
  >;
};

export type ProductCards = {
  _type: "productCards";
  cards?: Array<{
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
    callout?: string;
    name?: string;
    productCategory?:
      | "Men's Shoes"
      | "Basketball Shoes"
      | "Men's Road Running Shoes";
    price?: number;
    _type: "productCard";
    _key: string;
  }>;
};

export type IconCards = {
  _type: "iconCards";
  heading?: string;
  cards?: Array<{
    icon?: "robot" | "box" | "bolt" | "trophy" | "people" | "thumb";
    heading?: string;
    body?: string;
    _type: "iconCard";
    _key: string;
  }>;
};

export type FrequentlyAskedQuestions = {
  _type: "frequentlyAskedQuestions";
  heading?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  questions?: Array<{
    question?: string;
    answer?: string;
    _type: "question";
    _key: string;
  }>;
};

export type Cards = {
  _type: "cards";
  headline?: string;
  subHeading?: string;
  ctaText?: string;
  cards?: Array<{
    featured?: boolean;
    badge?: string;
    headline?: string;
    body?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    cta?: {
      ctaText?: string;
      to?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
    };
    _type: "card";
    _key: string;
  }>;
};

export type Split = {
  _type: "split";
  headline?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    style?: "rounded" | "square";
    _type: "image";
  };
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Hero = {
  _type: "hero";
  headline?: string;
  eyebrow?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  button?: {
    text?: string;
    to?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
  };
};

export type CarouselHero = {
  _type: "carouselHero";
  title?: string;
  items?: Array<
    {
      _key: string;
    } & Hero
  >;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<
    {
      _key: string;
    } & SanityAssistInstructionTask
  >;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<
    {
      _key: string;
    } & SanityAssistSchemaTypeField
  >;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }
    | ({
        _key: string;
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string;
      } & SanityAssistInstructionContext)
    | ({
        _key: string;
      } & SanityAssistInstructionUserInput)
  >;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<
    | ({
        _key: string;
      } & SanityAssistOutputField)
    | ({
        _key: string;
      } & SanityAssistOutputType)
  >;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<
    {
      _key: string;
    } & SanityAssistInstruction
  >;
};

export type TranslationMetadata = {
  _id: string;
  _type: "translation.metadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  translations?: Array<
    {
      _key: string;
    } & InternationalizedArrayReferenceValue
  >;
  schemaTypes?: Array<string>;
};

export type InternationalizedArrayReferenceValue = {
  _type: "internationalizedArrayReferenceValue";
  value?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  sections?: Array<
    | ({
        _key: string;
      } & CarouselHero)
    | ({
        _key: string;
      } & Hero)
    | ({
        _key: string;
      } & Split)
    | ({
        _key: string;
      } & Cards)
    | ({
        _key: string;
      } & FrequentlyAskedQuestions)
    | ({
        _key: string;
      } & IconCards)
    | ({
        _key: string;
      } & ProductCards)
    | ({
        _key: string;
      } & PortableTextSection)
    | ({
        _key: string;
      } & Stats)
  >;
  language?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type InternationalizedArrayReference = Array<
  {
    _key: string;
  } & InternationalizedArrayReferenceValue
>;

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Stats
  | PortableTextSection
  | ProductCards
  | IconCards
  | FrequentlyAskedQuestions
  | Cards
  | Split
  | Hero
  | CarouselHero
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField
  | TranslationMetadata
  | InternationalizedArrayReferenceValue
  | Page
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | InternationalizedArrayReference
  | MediaTag
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/sitemap.ts
// Variable: allPageQuery
// Query: *[_type == "page"]{"slug":slug.current, _updatedAt, language}
export type AllPageQueryResult = Array<{
  slug: string | null;
  _updatedAt: string;
  language: string | null;
}>;
// Source: ./app/(site)/[language]/[slug]/page.tsx
// Variable: allPageRouteQuery
// Query: *[_type == "page"]
export type AllPageRouteQueryResult = Array<{
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  sections?: Array<
    | ({
        _key: string;
      } & Cards)
    | ({
        _key: string;
      } & CarouselHero)
    | ({
        _key: string;
      } & FrequentlyAskedQuestions)
    | ({
        _key: string;
      } & Hero)
    | ({
        _key: string;
      } & IconCards)
    | ({
        _key: string;
      } & PortableTextSection)
    | ({
        _key: string;
      } & ProductCards)
    | ({
        _key: string;
      } & Split)
    | ({
        _key: string;
      } & Stats)
  >;
  language?: string;
}>;
// Variable: pageQuery
// Query: *[_type == "page" && slug.current == $slug && language == $language][0]{  sections[]{    _key,    _type,    _type == "carouselHero" => {      items[]{        headline,        eyebrow,        image{          ...,          "palette": asset->metadata.palette        },        _key,        button{          to->,          text        }      }    },    _type == "hero" => {      headline,      eyebrow,      image {        ...,        "palette": asset->metadata.palette      },      button{        to->,        text      }    },    _type == "split" => {      headline,      body,      image,      styles    },    _type == "frequentlyAskedQuestions" => {      heading,      body,      questions,    },    _type == "iconCards" => {      heading,      cards,    },    _type == "cards" => {      headline,      subHeading,      ctaText,      cards[]{        _key,        headline,        badge,        body,        featured,        cta{          ctaText,          to->        },        image {          ...,          "palette": asset->metadata.palette        }      },    },    _type == "productCards" => {      cards[]{        name,        images,        price,        productCategory,        callout,        _key      }    },    _type == "portableTextSection" => {      body    },    _type == "stats" => {      heading,      stats    }  }}
export type PageQueryResult = {
  sections: Array<
    | {
        _key: string;
        _type: "cards";
        headline: string | null;
        subHeading: string | null;
        ctaText: string | null;
        cards: Array<{
          _key: string;
          headline: string | null;
          badge: string | null;
          body: string | null;
          featured: boolean | null;
          cta: {
            ctaText: string | null;
            to: {
              _id: string;
              _type: "page";
              _createdAt: string;
              _updatedAt: string;
              _rev: string;
              title?: string;
              slug?: Slug;
              sections?: Array<
                | ({
                    _key: string;
                  } & Cards)
                | ({
                    _key: string;
                  } & CarouselHero)
                | ({
                    _key: string;
                  } & FrequentlyAskedQuestions)
                | ({
                    _key: string;
                  } & Hero)
                | ({
                    _key: string;
                  } & IconCards)
                | ({
                    _key: string;
                  } & PortableTextSection)
                | ({
                    _key: string;
                  } & ProductCards)
                | ({
                    _key: string;
                  } & Split)
                | ({
                    _key: string;
                  } & Stats)
              >;
              language?: string;
            } | null;
          } | null;
          image: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
            palette: SanityImagePalette | null;
          } | null;
        }> | null;
      }
    | {
        _key: string;
        _type: "carouselHero";
        items: Array<{
          headline: string | null;
          eyebrow: string | null;
          image: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
            palette: SanityImagePalette | null;
          } | null;
          _key: string;
          button: {
            to: {
              _id: string;
              _type: "page";
              _createdAt: string;
              _updatedAt: string;
              _rev: string;
              title?: string;
              slug?: Slug;
              sections?: Array<
                | ({
                    _key: string;
                  } & Cards)
                | ({
                    _key: string;
                  } & CarouselHero)
                | ({
                    _key: string;
                  } & FrequentlyAskedQuestions)
                | ({
                    _key: string;
                  } & Hero)
                | ({
                    _key: string;
                  } & IconCards)
                | ({
                    _key: string;
                  } & PortableTextSection)
                | ({
                    _key: string;
                  } & ProductCards)
                | ({
                    _key: string;
                  } & Split)
                | ({
                    _key: string;
                  } & Stats)
              >;
              language?: string;
            } | null;
            text: string | null;
          } | null;
        }> | null;
      }
    | {
        _key: string;
        _type: "frequentlyAskedQuestions";
        heading: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?:
            | "blockquote"
            | "h1"
            | "h2"
            | "h3"
            | "h4"
            | "h5"
            | "h6"
            | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        questions: Array<{
          question?: string;
          answer?: string;
          _type: "question";
          _key: string;
        }> | null;
      }
    | {
        _key: string;
        _type: "hero";
        headline: string | null;
        eyebrow: string | null;
        image: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
          palette: SanityImagePalette | null;
        } | null;
        button: {
          to: {
            _id: string;
            _type: "page";
            _createdAt: string;
            _updatedAt: string;
            _rev: string;
            title?: string;
            slug?: Slug;
            sections?: Array<
              | ({
                  _key: string;
                } & Cards)
              | ({
                  _key: string;
                } & CarouselHero)
              | ({
                  _key: string;
                } & FrequentlyAskedQuestions)
              | ({
                  _key: string;
                } & Hero)
              | ({
                  _key: string;
                } & IconCards)
              | ({
                  _key: string;
                } & PortableTextSection)
              | ({
                  _key: string;
                } & ProductCards)
              | ({
                  _key: string;
                } & Split)
              | ({
                  _key: string;
                } & Stats)
            >;
            language?: string;
          } | null;
          text: string | null;
        } | null;
      }
    | {
        _key: string;
        _type: "iconCards";
        heading: string | null;
        cards: Array<{
          icon?: "bolt" | "box" | "people" | "robot" | "thumb" | "trophy";
          heading?: string;
          body?: string;
          _type: "iconCard";
          _key: string;
        }> | null;
      }
    | {
        _key: string;
        _type: "portableTextSection";
        body: Array<
          | ({
              _key: string;
            } & FrequentlyAskedQuestions)
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              _type: "image";
              _key: string;
            }
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?:
                | "blockquote"
                | "h1"
                | "h2"
                | "h3"
                | "h4"
                | "h5"
                | "h6"
                | "normal";
              listItem?: "bullet" | "number";
              markDefs?: Array<{
                href?: string;
                _type: "link";
                _key: string;
              }>;
              level?: number;
              _type: "block";
              _key: string;
            }
        > | null;
      }
    | {
        _key: string;
        _type: "productCards";
        cards: Array<{
          name: string | null;
          images: Array<{
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
            _key: string;
          }> | null;
          price: number | null;
          productCategory:
            | "Basketball Shoes"
            | "Men's Road Running Shoes"
            | "Men's Shoes"
            | null;
          callout: string | null;
          _key: string;
        }> | null;
      }
    | {
        _key: string;
        _type: "split";
        headline: string | null;
        body: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?:
            | "blockquote"
            | "h1"
            | "h2"
            | "h3"
            | "h4"
            | "h5"
            | "h6"
            | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }> | null;
        image: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          style?: "rounded" | "square";
          _type: "image";
        } | null;
        styles: null;
      }
    | {
        _key: string;
        _type: "stats";
        heading: string | null;
        stats: Array<{
          heading?: string;
          number?: string;
          subhead?: string;
          _type: "stat";
          _key: string;
        }> | null;
      }
  > | null;
} | null;
